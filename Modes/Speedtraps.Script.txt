/**
 *
 * Speedtraps gamemode for TrackMania 2020
 *
 * written by dassschaf / UD Timmy
 *
 */

// Extends rounds mode script of TM 2020:
#Extends "Libs/Nadeo/TMNext/TrackMania/Modes/TMNextRoundsBase.Script.txt"

// ---------------------------------- //
// Script Info
#Const	CompatibleMapTypes	"TrackMania\\TM_Race,TM_Race"
#Const  Version     		"0"
#Const  ScriptName  		"Speedtraps.Script.txt"
#Const  C_ModeName          "Speedtraps"
#Const  Description         _("In $<$t$6F9Speedtraps$z$z$> mode, the goal is to drive with the fastest speed through all waypoints on the track. Your score is the sum of all recorded speeds at the waypoints / speedtraps. Highest score wins after the round.")


// ---------------------------------- //
// Libraries
// 
#Include "MathLib" as MathLib
#Include "TextLib" as TextLib
#Include "Libs/Nadeo/ModeLibs/Legacy/Layers2.Script.txt" as Layers
#Include "Libs/Nadeo/CommonLibs/Common/Semver.Script.txt" as Semver
#Include "Libs/Nadeo/ModeLibs/Common/Utils.Script.txt" as ModeUtils
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Constants.Script.txt" as MenuConsts
#Include "Libs/Nadeo/TMNext/TrackMania/Modes/Rounds/StateManager.Script.txt" as StateMgr

// Maniaapps
#Include "ManiaApps/Nadeo/TMxSM/Race/UIModules/ScoresTable_Server.Script.txt" as UIModules_ScoresTable
// #Include "ManiaApps/Nadeo/TMxSM/Race/UIModules/Checkpoint_Server.Script.txt" as UIModules_Checkpoint
#Include "ManiaApps/Nadeo/TMxSM/Race/UIModules/PauseMenuOnline_Server.Script.txt" as UIModules_PauseMenu_Online


// ---------------------------------- //
// Settings

// environment setting
#Setting S_ScriptEnvironment "development" ///< development or production

// Rounds settings
#Setting S_FinishTimeout -1 as _("Finish timeout (-1 for automatic)")
#Setting S_RoundsPerMap 2 as _("Number of rounds per map") ///< Number of round to play on one map before going to the next one
#Setting S_MapsPerMatch -1 as _("Number of maps per match (-1 to disable)") ///< Number of maps to play before finishing the match
#Setting S_UseTieBreak True as _("Use Tiebreaker")	///< Continue to play the map until the tie is broken

// Speedtrap relevant settings
#Setting S_ShowDebugInfo False as _("Show Debug info")
#Setting S_RespawnPenalty 150 as _("Respawn Penalty")

// collision settings
#Setting S_TrustClientSimu False
#Setting S_UseCrudeExtrapolation False


// ---------------------------------- //
// Constants
// #Const C_NAME VALUE
#Const C_UploadRecord False
#Const C_HudModulePath "" //< Path to the hud module
#Const C_ManiaAppUrl "file://Media/ManiaApps/Nadeo/TMNext/TrackMania/Rounds/Rounds.Script.txt" //< Url of the mania app

#Const C_FakeUsersNb 0

#Const C_MapResult_OK 0
#Const C_MapResult_NO 1

// ---------------------------------- //
// Global variables


// ---------------------------------- //
// Extends

***Match_LogVersion***
***

    // register the script to the log
    Log::RegisterScript(ScriptName, Version);

*** // Match_LogVersion

***Match_Rules***
***
    // register game mode information
    ModeInfo::SetName(C_ModeName);
    ModeInfo::SetType(ModeInfo::C_Type_FreeForAll);
    ModeInfo::SetRules(Description);
    ModeInfo::SetStatusMessage(_("TYPE: Free for all\nOBJECTIVE: Set the best score on the track."));

*** // Match_Rules

***Match_LoadHud***
***
    // Load HUD
    if (C_HudModulePath != "") Hud_Load(C_HudModulePath);

*** // Match_LoadHud

***Match_AfterLoadHud***
***
    // Set ManiaApp
    ClientManiaAppUrl = C_ManiaAppUrl;

    // Sort Scores by score in the individual rounds
    Race::SortScores(Race::C_Sort_RoundPoints);

    // Scorestable 
    UIModules_ScoresTable::SetScoreMode(UIModules_ScoresTable::C_Mode_Points);

    // Pause Menu
    UIModules_PauseMenu_Online::SetHelp(Description);

    // Hide SM Overlay
    UIManager.UIAll.OverlayHideSpectatorControllers = True;
    UIManager.UIAll.OverlayHideSpectatorInfos = True;
    UIManager.UIAll.OverlayHideChrono = True; 
    UIManager.UIAll.OverlayHideCountdown = True;

*** // Match_AfterLoadHud

***Match_Yield***
***
    foreach (Event in PendingEvents) {
        switch (Event.Type) {
            // Initialize players when they join the server
            case CSmModeEvent::EType::OnPlayerAdded: {
                declare Player <=> Event.Player;

                StateMgr::InitializePlayer(Player);
                CarRank::InitializePlayer(Player);
            }
        }
    }

    StateMgr::Yield();
*** // Match_Yield

***Match_InitServer***
***
    declare Integer Server_RoundsPerMap;
    declare Integer Server_MapsPerMatch;
*** // Match_InitServer

***Match_StartServer***
***
    // Initialize mode
    UseClans = False;
    UsePvPCollisions = False;

    Scores::SaveInScore(Scores::C_Points_Match);
    
    StateMgr::ForcePlayersStates([StateMgr::C_State_Waiting]);

    WarmUp::SetAvailability(True);

    Server_RoundsPerMap = S_RoundsPerMap - 1;
    Server_MapsPerMatch = S_MapsPerMatch - 1;

    
    // RunSpeed layer
    Layers::Create("RunSpeedLayer", RunSpeedLayerLayerText());
    Layers::SetType("RunSpeedLayer", CUILayer::EUILayerType::Normal);
    declare RunSpeedLayer <=> Layers::Get("RunSpeedLayer");
    Layers::Attach("RunSpeedLayer");

    // Debuginfo layer
    if (S_ShowDebugInfo) {
        Layers::Create("DebugInfoLayer", DebugInfoLayerLayerText());
        Layers::SetType("DebugInfoLayer", CUILayer::EUILayerType::Normal);
        declare DebugInfoLayer <=> Layers::Get("DebugInfoLayer");
        Layers::Attach("DebugInfoLayer");
    }

*** // Match_StartServer

***Match_InitMap***
***
    declare Integer Map_ValidRoundsNb = 0;

*** // Match_InitMap

***Match_StartMap***
***
    // Add bot when necessary
    Users_SetNbFakeUsers(C_FakeUsersNb, 0);

    CarRank::Reset();

    // Warm up
    //UIModules_ScoresTable::SetFooterInfo(_("Warm up"));
    //MB_WarmUp(S_WarmUpNb, S_WarmUpDuration * 1000, S_WarmUpTimeout * 1000);

*** // Match_StartMap

***Match_StartRound***
***

    StateMgr::ForcePlayersStates([StateMgr::C_State_Playing]);

    foreach (Player in Players) {
        declare UI <=> UIManager.GetUI(Player);
        
        declare netwrite Integer Net_RunScore for UI;
        declare netwrite Boolean Net_IsRunDone for UI;
        Net_RunScore = 0;
        Net_IsRunDone = False;

        declare netwrite Boolean Net_ShowRunScore for UI;
        Net_ShowRunScore = True;
    }

***

***Rounds_PlayerSpawned***
***
    CarRank::ThrottleUpdate(CarRank::C_SortCriteria_CurrentRace);

*** // Rounds_PlayerSpawned

***Match_PlayLoop***
***
    // ------------------
    // Pending Events Handler
    foreach (Event in PendingEvents) {

        // get player index
        declare Player <=> Event.Player;
        
        // Ignore bots
        if (Player.IsBot || Player.IsFakePlayer)
            continue;

        switch(Event.Type) {
            // Player joins game
            case CSmModeEvent::EType::OnPlayerAdded: {
                Race::Start(Player);

                // UI things:
                declare UI <=> UIManager.GetUI(Player);

                declare netwrite Integer Net_RunScore for UI;
                declare netwrite Boolean Net_IsRunDone for UI;
                Net_RunScore = 0;
                Net_IsRunDone = False;

                declare netwrite Boolean Net_ShowRunScore for UI;
                Net_ShowRunScore = True;

            }

            // Player trespasses waypoint = Finish or CP
            case CSmModeEvent::EType::OnPlayerTriggersWaypoint: {
                declare Integer Speed = MathLib::NearestInteger(Player.Speed * 3.6);

                if (Event.GiveUp) {
                    // Reset score
                    Scores::SetPlayerRoundPoints(Player.Score, 0);
                    Race::SortScores(Race::C_Sort_RoundPoints);

                    // UI things:
                    declare UI <=> UIManager.GetUI(Player);

                    declare netwrite Integer Net_RunScore for UI;
                    declare netwrite Boolean Net_IsRunDone for UI;
                    Net_RunScore = Scores::GetPlayerRoundPoints(Player.Score);
                    Net_IsRunDone = False;

                } else if (Event.IsNewLap) {
                    // Add speed to score
                    Scores::AddPlayerRoundPoints(Player.Score, Speed);
                    Race::SortScores(Race::C_Sort_RoundPoints);

                    // UI things:
                    declare UI <=> UIManager.GetUI(Player);

                    declare netwrite Integer Net_RunScore for UI;
                    declare netwrite Boolean Net_IsRunDone for UI;
                    Net_RunScore = Scores::GetPlayerRoundPoints(Player.Score);
                    Net_IsRunDone = False;

                    declare netwrite Boolean Net_ShowRunScore for UI;
                    Net_ShowRunScore = True;

                } else if (Event.IsFinish) {
                    // score handling, player finished race

                    // Add speed to score
                    Scores::AddPlayerRoundPoints(Player.Score, Speed);
                    Race::SortScores(Race::C_Sort_RoundPoints);

                    // do UI things:
                    declare UI <=> UIManager.GetUI(Player);

                    declare netwrite Integer Net_RunScore for UI;
                    declare netwrite Boolean Net_IsRunDone for UI;
                    Net_RunScore = Scores::GetPlayerRoundPoints(Player.Score);
                    Net_IsRunDone = True;

                    declare netwrite Boolean Net_ShowRunScore for UI;
                    Net_ShowRunScore = True;

                    CarRank::ThrottleUpdate(CarRank::C_SortCriteria_CurrentRace);
                    Race::Wait(Player);
                    
                    // Start the countdown if it's the first player to finish
                    if (EndTime <= 0) {
                        EndTime = GetFinishTimeout();
                    }

                } else {
                    // checkpoint - Add speed to score
            
                    // Add speed to score
                    Scores::AddPlayerRoundPoints(Player.Score, Speed);
                    Race::SortScores(Race::C_Sort_RoundPoints);

                    // UI things:
                    declare UI <=> UIManager.GetUI(Player);

                    declare netwrite Integer Net_RunScore for UI;
                    declare netwrite Boolean Net_IsRunDone for UI;
                    Net_RunScore = Scores::GetPlayerRoundPoints(Player.Score);
                    Net_IsRunDone = False;

                    declare netwrite Boolean Net_ShowRunScore for UI;
                    Net_ShowRunScore = True;
                }

            }

            // Player demands respawn
            case CSmModeEvent::EType::OnPlayerRequestRespawn: {
                // Apply respawn penalty
                Scores::RemovePlayerRoundPoints(Player.Score, S_RespawnPenalty);

                if (Event.GiveUp) {
                    Scores::SetPlayerRoundPoints(Player.Score, 0);
                    Race::Wait(Player);
                }

                Race::SortScores(Race::C_Sort_RoundPoints);

                // UI things:
                declare UI <=> UIManager.GetUI(Player);

                declare netwrite Integer Net_RunScore for UI;
                declare netwrite Boolean Net_IsRunDone for UI;
                Net_RunScore = Scores::GetPlayerRoundPoints(Player.Score);
                Net_IsRunDone = False;

            }
        }
    }

    // ------------------
    // Player phsyics debug info
    foreach (Player in Players) {

        // Ignore Bots
        if (Player.IsBot || Player.IsFakePlayer)
            continue;

        // get player UI
        declare UI <=> UIManager.GetUI(Player);

        // Non-Spawned things
        if (Player.SpawnStatus == CSmPlayer::ESpawnStatus::NotSpawned)
        {            
            // debug info
            if (S_ShowDebugInfo) {
                declare netwrite Boolean Net_DebugShow for UI;
                Net_DebugShow = False;
            }
        }

        // Spawned things
        if (Player.SpawnStatus == CSmPlayer::ESpawnStatus::Spawned) {	

            // debug info
            if (S_ShowDebugInfo) {
                declare Text ManialinkDebugInfo;

                declare netwrite Integer Net_DebugSpeed for UI;
                declare netwrite Integer Net_DebugScore for UI;
                declare netwrite Boolean Net_DebugShow for UI;

                Net_DebugSpeed = MathLib::NearestInteger(Player.Speed * 3.6);
                Net_DebugScore = Scores::GetPlayerRoundPoints(Player.Score);
                Net_DebugShow = True;
            }

        }
    }

    // Server info change
    if (
        Server_RoundsPerMap != S_RoundsPerMap ||
        Server_MapsPerMatch != S_MapsPerMatch
    ) {
        Server_RoundsPerMap = S_RoundsPerMap;
        Server_MapsPerMatch = S_MapsPerMatch;
    }

*** // Match_PlayLoop

***Match_EndRound***
***

    foreach (Player in Players) {
        declare UI <=> UIManager.GetUI(Player);

        declare netwrite Boolean Net_ShowRunScore for UI;
        Net_ShowRunScore = False;
    }

    Race::StopSkipOutroAll();
    EndTime = -1;
    StateMgr::ForcePlayersStates([StateMgr::C_State_Waiting]);
    CarRank::Update(CarRank::C_SortCriteria_CurrentRace);

    if (Semver::Compare(XmlRpc::GetApiVersion(), ">=", "2.1.1")) {
        Scores::XmlRpc_SendScores(Scores::C_Section_PreEndRound, "");
    }

    // Check if it was an invalid round
    if (Round_ForceEndRound || Round_SkipPauseRound || Round_Skipped || !Round_HasFinishers()) {
        // Cancel points
        foreach (Score in Scores) {
            Scores::SetPlayerRoundPoints(Score, 0);
        }
        // Do not launch the forced end round sequence after a pause
        if (!Round_SkipPauseRound) {
            ForcedEndRoundSequence();
        }

    } else {
        // Valid round
        Map_ValidRoundsNb += 1;

        // Show scores table for 4,5 seconds
        UIManager.UIAll.ScoreTableVisibility = CUIConfig::EVisibility::ForcedVisible;
        UIManager.UIAll.UISequence = CUIConfig::EUISequence::EndRound;
        MB_Sleep(1500);

        // Add Scores to match scores
        foreach (Player in Players) {
            // get Score
            declare Integer pts = Scores::GetPlayerRoundPoints(Player.Score);

            Scores::AddPlayerMatchPoints(Player.Score, pts);
            Scores::AddPlayerMapPoints(Player.Score, pts);

            Scores::SetPlayerRoundPoints(Player.Score, 0);
        }

        // End the round and re-sort scores
        Scores::EndRound();
        Race::SortScores(Race::C_Sort_TotalPoints);
        MB_Sleep(3000);

        // Hide scores table again
        UIManager.UIAll.ScoreTableVisibility = CUIConfig::EVisibility::Normal;
        UIManager.UIAll.UISequence = CUIConfig::EUISequence::Playing;
                
        // Check if we can move on
        if (S_RoundsPerMap <= Map_ValidRoundsNb) {
            MB_StopMap();
        }
    }

*** // Match_EndRound

***Match_EndMap***
***
    // If there's no tie (or no tiebreaking enabled) and we finished the given map number per match, we can wrap up the match
    if (!Match_IsTied() && S_MapsPerMatch > 1 && MB_GetMapCount() >= S_MapsPerMatch) MB_StopMatch(); 

    // If we only do a single map per match, we can wrap it up too.
    if (S_MapsPerMatch <= 1) MB_StopMatch();

    if (!MB_MapIsRunning() && MB_MatchIsRunning()) MB_SkipPodiumSequence();

    Race::SortScores(Race::C_Sort_TotalPoints);
    Scores::SetPlayerWinner(Scores::GetBestPlayer(Scores::C_Sort_MatchPoints));
***


// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Functions
//

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Get the time left to the players to finish the round after the first player
 *
 *	@return 		The time left in ms
 */
Integer GetFinishTimeout() {
	declare FinishTimeout = 0;
	
	if (S_FinishTimeout >= 0) {
		FinishTimeout = S_FinishTimeout * 1000;
	} else {
		FinishTimeout = 5000;
		if (Map.TMObjective_IsLapRace && Race::GetLapsNb() > 0 && Map.TMObjective_NbLaps > 0) {
			FinishTimeout += ((Map.TMObjective_AuthorTime / Map.TMObjective_NbLaps) * Race::GetLapsNb()) / 6;
		} else {
			FinishTimeout += Map.TMObjective_AuthorTime / 6;
		}
	}
	
	return Now + FinishTimeout;
}


// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Checks if the round had at least someone finish it.
 *  
 */
Boolean Round_HasFinishers() {
    // helper variable
    declare Finished = False;

    // check for all scores, if someone has a non-0 score
    foreach (Score in Scores) {
        // Get Score
        declare pts = Scores::GetPlayerRoundPoints(Score);

        // Check if someone has finished
        if (pts > 0)
            Finished = True;
    }

    return Finished;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Checks if the match is currently tied.
 *  
 */
Boolean Match_IsTied() {

    // bail out, if we don't use tiebreaker
    if (S_UseTieBreak == False) return False;

    // helper variables
    declare s = -1;
    declare isTied = False;

    // Check if first place(s) have tied score
    foreach (Score in Scores) {
        declare pts = Scores::GetPlayerMatchPoints(Score);

        if (pts > s) { s = pts; isTied = False; }
        else if (pts == s ) { isTied = True; }
    }

    return isTied;
}


// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// UI Manialinks
//

// ~~~~~~~
Text RunSpeedLayerLayerText() {
    return """
    <label text="0" style="TextButtonMedium" id="Label_RunSpeed" scale="1.50" textsize="4" textcolor="FFF" valign="center" halign="center" pos="0 50"/>
    <script><!--
        #Include "TextLib" as TextLib

        main() {
            declare netread Integer Net_RunScore for UI;
            declare netread Boolean Net_IsRunDone for UI;
            declare netread Boolean Net_ShowRunScore for UI;

            declare Label_RunSpeed <=> (Page.GetFirstChild("Label_RunSpeed") as CMlLabel);

            Label_RunSpeed.Show();
            
            while (True) {
                yield;

                if (Net_ShowRunScore) {
                    Label_RunSpeed.SetText(TextLib::ToText(Net_RunScore)); ///< Score    

                    if (Net_IsRunDone == True)  Label_RunSpeed.TextColor = <0., 1., 0.>;
                    if (Net_IsRunDone == False) Label_RunSpeed.TextColor = <1., 1., 1.>;

                } else {
                    Label_RunSpeed.SetText("");
                }
            }
        }
    --></script>
    """;
}

// ~~~~~~~
Text DebugInfoLayerLayerText() {
    return """
    <label id="Label_DebugInfo" pos="0 1"/>
    <script><!--
        #Include "TextLib" as TextLib

        main() {
            declare netread Integer Net_DebugScore for UI;
            declare netread Integer Net_DebugSpeed for UI;
            declare netread Boolean Net_DebugShow for UI;

            declare Label_DebugInfo <=> ((Page.GetFirstChild("Label_DebugInfo") as CMlLabel));

            while (True) {
                yield;
                
                if (Net_DebugShow) {

                    declare DebugText = " Speed: " ^ TextLib::ToText(Net_DebugSpeed) ^ " \n Score: " ^ TextLib::ToText(Net_DebugScore);
                    Label_DebugInfo.SetText(DebugText);


                } else { Label_DebugInfo.SetText(""); }
            }
        }
    --></script>
    """;
}

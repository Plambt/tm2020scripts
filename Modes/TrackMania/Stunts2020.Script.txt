/**
 *
 * Stunts for TrackMania 2020
 *
 * written by dassschaf / UD Timmy
 *
 */

// Extends base mode script of TM 2020:
#Extends "Libs/Nadeo/TMNext/TrackMania/Modes/TMNextBase.Script.txt"

// ---------------------------------- //
// Script Info
#Const	CompatibleMapTypes	"TrackMania\\TM_Race,TM_Race"
#Const  Version     		"0"
#Const  ScriptName  		"Stunts2020.Script.txt"
#Const  C_ModeName          "Stunts2020"
#Const  Description         _("In $<$6f9Stunt mode$>, the goal is to make as much points by tricks in the air as possible before the time is over. Finishing too late and respawning cause point deduction. The winner is the player with the highest score. \n This mode is inspired by the original Stunt mode known from TM 1 or Spaii's stunts titlepack for TM 2.")

// ---------------------------------- //
// Libraries

#Include "MathLib" as MathLib
#Include "TextLib" as TextLib

#Include "Libs/Nadeo/ModeLibs/Legacy/Layers2.Script.txt" as Layers

// ---------------------------------- //
// Settings
// #Setting S_NAME VALUE as _("TEXT")

#Setting S_TimeLimit 300 as _("Time Limit:") ///< as ... for server setup
#Setting S_ShowDebugInfo True as _("Show Debug info")

// ---------------------------------- //
// Constants
// #Const C_NAME VALUE
#Const C_UploadRecord False

// ---------------------------------- //
// Structures
#Struct K_PlayerInfo {
    Text Login;
}
// ---------------------------------- //
// Global variables
declare K_PlayerInfo[] G_PlayerInfo; // player info array


// ---------------------------------- //
// Extends

***Match_LogVersion***
***
    // register the script to the log
    Log::RegisterScript(ScriptName, Version);
*** // Match_LogVersion



***Match_Rules***
***
    // register game mode information
    ModeInfo::SetName(C_ModeName);
    ModeInfo::SetType(ModeInfo::C_Type_FreeForAll);
    ModeInfo::SetRules(Description);
    ModeInfo::SetStatusMessage(_("TYPE: Free for all\nOBJECTIVE: Set the best score on the track."));

*** // Match_Rules



***Match_StartServer***
***
    // Initialize Gamemode
    Race::SetRespawnBehaviour(Race::C_RespawnBehaviour_Normal);
    Race::SetNetworkMode(True, False, False);
*** // Match_StartServer



***Match_InitMap***
***
    // clear info array
    G_PlayerInfo.clear();

    foreach (Player in Players) {
        G_PlayerInfo.add(K_PlayerInfo{Login = Player.User.Login});
    }

*** // Match_InitMap



***Match_StartMap***
***
    // Map actual start


    // Start players for the race
    foreach (Player in Players) {
        Race::Start(Player);
    }

*** // Match_StartMap



***Match_InitTurn***
***
    // Turn initialitzation
    yield;

*** // Match_InitTurn



***Match_StartTurn***
***
    // Turn start
    yield;

*** // Match_StartTurn



***Match_PlayLoop***
***
    // ------------------
    // Pending Events Handler
    foreach (Event in PendingEvents) {
        // get player index
        declare Player <=> Event.Player;
        declare Integer PId = GetPlayerIndexFromLogin(Player.User.Login);

        switch(Event.Type) {
            // Player joins game
            case CSmModeEvent::EType::OnPlayerAdded: {
                G_PlayerInfo.add(K_PlayerInfo{Login = Player.User.Login});
                Race::Start(Player);
            }

        }


    }

    // ------------------
    // Player phsyics debug info
    foreach (Player in Players) {

        // get player index
        declare Integer PId = GetPlayerIndexFromLogin(Player.User.Login);

        // skip loop iteration if info struct not found
        if (PId == -1)
            continue;

        // re-spawn mechanics
        if (Player.SpawnStatus == CSmPlayer::ESpawnStatus::NotSpawned)
        {
            Race::Start(Player);
        }

        // score and jump calculation
        if (Player.SpawnStatus == CSmPlayer::ESpawnStatus::Spawned) {

			

            // debug info
            if (S_ShowDebugInfo) {
                declare Text ManialinkDebugInfo;
                declare Text VehicleDebugInfo;

                declare Real InputSteer = Player.InputSteer;
                declare Integer FlyingDuration = Player.FlyingDuration;
                declare Real FlyingDistance = Player.FlyingDistance;
                declare Integer WheelsContactCount = Player.WheelsContactCount;
                declare Boolean IsTouchingGround = Player.IsTouchingGround;
                declare Real Upwardness = Player.Upwardness;
                
                declare Real AimX = Player.AimDirection.X;
                declare Real AimY = Player.AimDirection.Y;
                declare Real AimZ = Player.AimDirection.Z;
                
                if (Player.Vehicle != Null) {
                    declare Vehicle <=> Player.Vehicle; //CModeVehicle class

                    declare Real PosX = Vehicle.Position.X;
                    declare Real PosY = Vehicle.Position.Y;
                    declare Real PosZ = Vehicle.Position.Z;

                    declare Real LeftX = Vehicle.Left.X;
                    declare Real LeftY = Vehicle.Left.Y;
                    declare Real LeftZ = Vehicle.Left.Z;

                    declare Real UpX = Vehicle.Up.X;
                    declare Real UpY = Vehicle.Up.Y;
                    declare Real UpZ = Vehicle.Up.Z;

                    declare Real DirX = Vehicle.Dir.X;
                    declare Real DirY = Vehicle.Dir.Y;
                    declare Real DirZ = Vehicle.Dir.Z;

                    VehicleDebugInfo = """
                    <label pos="0 -2" z-index="0"
                    text="
                    Coordinates: X={{{PosX}}}, Y={{{PosY}}}, Z={{{PosZ}}}
                    Left Vector: X={{{LeftX}}}, Y={{{LeftY}}}, Z={{{LeftZ}}}
                    Up Vector: X={{{UpX}}}, Y={{{UpY}}}, Z={{{UpZ}}}
                    Front Vector: X={{{DirX}}}, Y={{{DirY}}}, Z={{{DirZ}}}
                    "/>
                    """;
                }
                

                
                


                ManialinkDebugInfo = """
                <label pos="0 1" z-index="0" 
                text="
                Steer: {{{InputSteer}}}
                Fly Duration: {{{FlyingDuration}}}
                Fly Distance: {{{FlyingDistance}}}
                On Ground? {{{IsTouchingGround}}}
                #Wheels: {{{WheelsContactCount}}}
                Upwardness: {{{Upwardness}}}
                             
                "/>
                """;

                declare Text DebugManialink = ManialinkDebugInfo ^ VehicleDebugInfo;
                // get debug info for the player
                Layers::Create("DebugManialink", DebugManialink);
                Layers::SetType("DebugManialink", CUILayer::EUILayerType::Normal);
                Layers::Attach("DebugManialink", Player);
            }
        }
    }



*** // Match_PlayLoop

// ------------------
/**
 * @param _Login    Player's Login
 *
 * @return          Player's Index of his data struct in G_PlayerInfo
 */
 Integer GetPlayerIndexFromLogin(Text _Login) {
    declare Integer PId = -1;

    // Iterate over player info structs, return PId once matching player is found
    for (I, 0, G_PlayerInfo.count - 1) {
        if (G_PlayerInfo[I].Login == _Login)
            PId = I;
    }

    // return -1 if there is no fitting player
    return PId;
}
/**
 *
 * Stunts for TrackMania 2020
 *
 * written by dassschaf / UD Timmy
 *
 */


/**
 *	Interesting Information for stunt mode: 
 *	* CSmPlayer class
 *	see: https://maniascript.boss-bravo.fr/class_c_sm_player.html
 *	* CSmPlayer->InputSteer
 *	* CSmPlayer->WheelsContactGround
 *  * CSmPlayer->FlyingDistance
 *  * CSmPlayer->Upwardness???
 *  * CSmPlayer->AimDirection
 *  * CSmPlayer->Velocity
 *
 *  * CSmPlayer->Vehicle (Type: CModeVehicle)
 *	see: https://maniascript.boss-bravo.fr/class_c_mode_vehicle.html
 */

// Extends base mode script of TM 2020:
#Extends "Libs/Nadeo/TMNext/TrackMania/Modes/TMNextBase.Script.txt"

// ---------------------------------- //
// Script Info
#Const	CompatibleMapTypes	"TrackMania\\TM_Race,TM_Race"
#Const  Version     		"0"
#Const  ScriptName  		"Stunts2020.Script.txt"
#Const  C_ModeName          "Stunts2020"
#Const  Description         _("In $<$6f9Stunt mode$>, the goal is to make as much points by tricks in the air as possible before the time is over. Finishing too late and respawning cause point deduction. The winner is the player with the highest score. \n This mode is inspired by the original Stunt mode known from TM 1 or Spaii's stunts titlepack for TM 2.")

// ---------------------------------- //
// Libraries

#Include "MathLib" as MathLib
#Include "TextLib" as TextLib

#Include "Libs/Nadeo/ModeLibs/Legacy/Layers2.Script.txt" as Layers

// ---------------------------------- //
// Settings
// #Setting S_NAME VALUE as _("TEXT")

#Setting S_TimeLimit 300 as _("Time Limit:") ///< as ... for server setup

// ---------------------------------- //
// Constants
// #Const C_NAME VALUE
#Const C_UploadRecord False

// ---------------------------------- //
// Global variables
declare Integer[Text] G_Scores;


// ---------------------------------- //
// Extends

***Match_LogVersion***
***
    // register the script to the log
    Log::RegisterScript(ScriptName, Version);
*** // Match_LogVersion



***Match_Rules***
***
    // register game mode information
    ModeInfo::SetName(C_ModeName);
    ModeInfo::SetType(ModeInfo::C_Type_FreeForAll);
    ModeInfo::SetRules(Description);
    ModeInfo::SetStatusMessage(_("TYPE: Free for all\nOBJECTIVE: Set the best score on the track."));

*** // Match_Rules



***Match_StartServer***
***
    
    // Initialize Gamemode
    Race::SetRespawnBehaviour(Race::C_RespawnBehaviour_NeverGiveUp);
*** // Match_StartServer



***Match_InitMap***
***
    // Map initialization
    G_Scores.clear();
    yield;

*** // Match_InitMap



***Match_StartMap***
***
    // Map actual start


    // Start players for the race
    foreach (Player in Players) {
        Race::Start(Player);
    }

*** // Match_StartMap



***Match_InitTurn***
***
    // Turn initialitzation
    yield;

*** // Match_InitTurn



***Match_StartTurn***
***
    // Turn start
    ModeStatusMessage = "Current map : "^Map.MapInfo.Name;

*** // Match_StartTurn



***Match_PlayLoop***
***
    // actual game mechanics?!
    foreach (Player in Players) {
        declare Text MLDebugInfo;

        // get debug info for the player
        Layers::Create("MLDebugInfo", MLDebugInfo);
        Layers::SetType("MLDebugInfo", CUILayer::EUILayerType::Normal);
        Layers::Attach("MLDebugInfo", Player);
    }

***

// this somehow prevents an EOF error?
Void dummy() {
}
